import tkinter as tk
from tkinter import messagebox
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import datetime

# Database setup
def init_db():
    conn = sqlite3.connect('bmi_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bmi_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user TEXT,
            date TEXT,
            weight REAL,
            height REAL,
            bmi REAL
        )
    ''')
    conn.commit()
    conn.close()

def insert_record(user, weight, height, bmi):
    conn = sqlite3.connect('bmi_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO bmi_records (user, date, weight, height, bmi)
        VALUES (?, ?, ?, ?, ?)
    ''', (user, datetime.date.today().strftime("%Y-%m-%d"), weight, height, bmi))
    conn.commit()
    conn.close()

def fetch_records():
    conn = sqlite3.connect('bmi_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM bmi_records')
    records = cursor.fetchall()
    conn.close()
    return records

# BMI calculation
def calculate_bmi(weight, height_cm):
    height_m = height_cm / 100  # Convert height from cm to meters
    if height_m > 0:
        return weight / (height_m ** 2)
    else:
        return 0

# GUI setup
def submit_data():
    user = user_entry.get()
    try:
        weight = float(weight_entry.get())
        height_cm = float(height_entry.get())
        if weight <= 0 or height_cm <= 0:
            raise ValueError("Weight and height must be positive numbers.")
        bmi = calculate_bmi(weight, height_cm)
        bmi_label.config(text=f'Your BMI: {bmi:.2f}')
        insert_record(user, weight, height_cm, bmi)
        messagebox.showinfo("Success", "BMI calculated and data saved.")
    except ValueError as ve:
        messagebox.showerror("Input Error", f"Invalid input: {ve}")

def view_history():
    records = fetch_records()
    history_window = tk.Toplevel(root)
    history_window.title("BMI History")
    for i, record in enumerate(records):
        tk.Label(history_window, text=f"User: {record[1]}, Date: {record[2]}, Weight: {record[3]}kg, Height: {record[4]}cm, BMI: {record[5]:.2f}").pack()

def show_trends():
    records = fetch_records()
    if not records:
        messagebox.showinfo("No Data", "No data available for trends.")
        return
    
    dates = []
    bmis = []
    for record in records:
        dates.append(record[2])
        bmis.append(record[5])
    
    fig, ax = plt.subplots()
    ax.plot(dates, bmis, marker='o')
    ax.set_xlabel('Date')
    ax.set_ylabel('BMI')
    ax.set_title('BMI Trends Over Time')
    fig.autofmt_xdate()
    
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()
    canvas.get_tk_widget().pack()

root = tk.Tk()
root.title("BMI Calculator")

tk.Label(root, text="User Name:").grid(row=0, column=0)
user_entry = tk.Entry(root)
user_entry.grid(row=0, column=1)

tk.Label(root, text="Weight (kg):").grid(row=1, column=0)
weight_entry = tk.Entry(root)
weight_entry.grid(row=1, column=1)

tk.Label(root, text="Height (cm):").grid(row=2, column=0)
height_entry = tk.Entry(root)
height_entry.grid(row=2, column=1)

tk.Button(root, text="Calculate BMI", command=submit_data).grid(row=3, column=0, columnspan=2)
bmi_label = tk.Label(root, text="Your BMI will appear here.")
bmi_label.grid(row=4, column=0, columnspan=2)

tk.Button(root, text="View History", command=view_history).grid(row=5, column=0, columnspan=2)
tk.Button(root, text="Show Trends", command=show_trends).grid(row=6, column=0, columnspan=2)

init_db()
root.mainloop()
