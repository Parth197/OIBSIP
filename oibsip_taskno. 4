import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import requests
import json
import geocoder

# Constants
API_KEY = '0da047f346d839d1b587ced886eb6d96'
BASE_URL = 'http://api.openweathermap.org/data/2.5/'

# Function to get weather data
def get_weather_data(location):
    try:
        # Get current weather
        response = requests.get(f"{BASE_URL}weather?q={location}&appid={API_KEY}&units=metric")
        weather_data = response.json()

        if weather_data['cod'] != 200:
            raise ValueError(weather_data.get('message', 'Unable to get weather data'))

        # Extract data
        city = weather_data['name']
        description = weather_data['weather'][0]['description']
        temp = weather_data['main']['temp']
        humidity = weather_data['main']['humidity']
        wind_speed = weather_data['wind']['speed']
        icon_code = weather_data['weather'][0]['icon']

        # Get forecast data
        response = requests.get(f"{BASE_URL}forecast?q={location}&appid={API_KEY}&units=metric")
        forecast_data = response.json()
        
        hourly_forecast = forecast_data['list'][:5]  # Get next 5 hours
        daily_forecast = forecast_data['list'][::8]  # Get daily data (8-hour intervals)

        return {
            'city': city,
            'description': description,
            'temp': temp,
            'humidity': humidity,
            'wind_speed': wind_speed,
            'icon_code': icon_code,
            'hourly_forecast': hourly_forecast,
            'daily_forecast': daily_forecast
        }
    except Exception as e:
        messagebox.showerror("Error", f"Failed to retrieve data: {str(e)}")
        return None

# Function to update weather info on the GUI
def update_weather():
    location = location_entry.get()
    if not location:
        messagebox.showwarning("Input Error", "Please enter a location.")
        return

    weather_data = get_weather_data(location)
    if not weather_data:
        return

    city_label.config(text=f"City: {weather_data['city']}")
    desc_label.config(text=f"Description: {weather_data['description']}")
    temp_label.config(text=f"Temperature: {weather_data['temp']}°C")
    humidity_label.config(text=f"Humidity: {weather_data['humidity']}%")
    wind_label.config(text=f"Wind Speed: {weather_data['wind_speed']} m/s")

    # Update weather icon
    icon_url = f"http://openweathermap.org/img/wn/{weather_data['icon_code']}@2x.png"
    icon_response = requests.get(icon_url)
    icon_image = Image.open(icon_response.content)
    icon_image = icon_image.resize((100, 100))
    icon_photo = ImageTk.PhotoImage(icon_image)
    icon_label.config(image=icon_photo)
    icon_label.image = icon_photo

    # Update forecasts
    hourly_text = "Hourly Forecast:\n"
    for hour in weather_data['hourly_forecast']:
        dt = hour['dt_txt']
        temp = hour['main']['temp']
        description = hour['weather'][0]['description']
        hourly_text += f"{dt}: {temp}°C, {description}\n"
    hourly_label.config(text=hourly_text)

    daily_text = "Daily Forecast:\n"
    for day in weather_data['daily_forecast']:
        dt = day['dt_txt']
        temp = day['main']['temp']
        description = day['weather'][0]['description']
        daily_text += f"{dt}: {temp}°C, {description}\n"
    daily_label.config(text=daily_text)

# Function to use current location
def use_current_location():
    g = geocoder.ip('me')
    location = g.city
    if location:
        location_entry.delete(0, tk.END)
        location_entry.insert(0, location)
        update_weather()
    else:
        messagebox.showwarning("Location Error", "Unable to detect your location.")

# GUI setup
root = tk.Tk()
root.title("Weather App")

tk.Label(root, text="Enter Location:").grid(row=0, column=0, padx=10, pady=10)
location_entry = tk.Entry(root, width=50)
location_entry.grid(row=0, column=1, padx=10, pady=10)

tk.Button(root, text="Get Weather", command=update_weather).grid(row=0, column=2, padx=10, pady=10)
tk.Button(root, text="Use Current Location", command=use_current_location).grid(row=0, column=3, padx=10, pady=10)

city_label = tk.Label(root, text="City:")
city_label.grid(row=1, column=0, columnspan=4, padx=10, pady=5)

desc_label = tk.Label(root, text="Description:")
desc_label.grid(row=2, column=0, columnspan=4, padx=10, pady=5)

temp_label = tk.Label(root, text="Temperature:")
temp_label.grid(row=3, column=0, columnspan=4, padx=10, pady=5)

humidity_label = tk.Label(root, text="Humidity:")
humidity_label.grid(row=4, column=0, columnspan=4, padx=10, pady=5)

wind_label = tk.Label(root, text="Wind Speed:")
wind_label.grid(row=5, column=0, columnspan=4, padx=10, pady=5)

icon_label = tk.Label(root)
icon_label.grid(row=1, column=4, rowspan=5, padx=10, pady=10)

hourly_label = tk.Label(root, text="Hourly Forecast:", justify=tk.LEFT)
hourly_label.grid(row=6, column=0, columnspan=4, padx=10, pady=10, sticky="w")

daily_label = tk.Label(root, text="Daily Forecast:", justify=tk.LEFT)
daily_label.grid(row=7, column=0, columnspan=4, padx=10, pady=10, sticky="w")

root.mainloop()
